name: Test

on:
  # Run on pushes to the main branch
  push:
    branches:
      - main
  # Run on pull requests
  pull_request:
    types: [opened, synchronize, reopened]
  # Run regularly at 12:00 UTC
  schedule:
    - cron: "0 12 * * *"

jobs:
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/circt/images/circt-ci-build:20250515145637
    steps:

      # Checkout the repository.
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Set git safe directory
        run: git config --global --add safe.directory $PWD

      # Checkout CIRCT.
      - name: Checkout CIRCT
        uses: actions/checkout@v5
        with:
          repository: llvm/circt
          submodules: recursive
          path: circt

      # Install dependencies.
      - name: Install dependencies
        run: |
          apt-get update -qq
          apt install -y cpanminus
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      # Setup ccache to speed up builds.
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 500M

      # Configure CIRCT.
      - name: Configure CIRCT
        run: |
          export PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH"
          cmake -G Ninja circt/llvm/llvm -B circt/build \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DLLVM_CCACHE_BUILD=ON \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DLLVM_TARGETS_TO_BUILD=host \
            -DLLVM_ENABLE_PROJECTS=mlir \
            -DLLVM_EXTERNAL_PROJECTS=circt \
            -DLLVM_EXTERNAL_CIRCT_SOURCE_DIR=$PWD/circt \
            -DCIRCT_SLANG_FRONTEND_ENABLED=ON

      # Build and test CIRCT.
      - name: Build and Test CIRCT
        run: |
          ninja -C circt/build circt-verilog
          echo "$PWD/circt/build/bin" >> "$GITHUB_PATH"

      # Fetch all submodules needed to run the tests. Also clear any temporary
      # directories that happen to already exist.
      - name: Prepare for tests
        run: |
          utils/update-all.sh
          rm -rf build results

      # Run individual tests.
      - name: Compile Snitch
        run: verilog/snitch/compile.sh

      - name: Run sv-tests
        run: |
          verilog/sv-tests/install-deps.sh
          verilog/sv-tests/run.sh

      # Display some results.
      - name: Results for sv-tests
        run: cat results/sv-tests/errors.txt

      # Upload the results as an artifact.
      - name: Upload results artifact
        uses: actions/upload-artifact@v4
        with:
          name: results
          compression-level: 9
          path: results

      # Archive the `results` directory on the `results` branch.
      - name: Checkout results branch
        uses: actions/checkout@v5
        with:
          ref: results
          path: results-branch

      - name: Archive results
        run: |
          # Copy the results to the target location.
          COMMIT=$(git -C circt rev-parse --short HEAD)
          TARGET="$(date -u +%Y/%Y-%m-%d-%H%M%S)-$COMMIT"
          mkdir -p results-branch/$(dirname $TARGET)
          cp -rv results results-branch/$TARGET

          # Commit the new results.
          cd results-branch
          git config --local \
            user.email "github-actions[bot]@users.noreply.github.com"
          git config --local \
            user.name "github-actions[bot]"
          git add .
          git commit -m "Results for $COMMIT"

          # Push the results. If the push fails, assume that it's because some
          # other job happened to push in the meantime.
          RETRY=0
          while ! git push; do
            if (( ++RETRY == 10 )); then
              echo "Giving up after $RETRY failed attempts to push results" &>2
              exit 1
            fi
            git pull --rebase
          done
